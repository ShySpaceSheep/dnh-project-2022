#include "script/definitions/constants/bgfg_constants.dnh"

let frame = 0;
let spellBGAlpha = 0;
let spellBg = false;

function SetSpellBG(spellbgID) {
    spellbgID = activeBossChara;
}

function SetBGAlphaVisibility(renderObjBG, alpha) {
    ObjRender_SetAlpha(renderObjBG, alpha);
    Obj_SetVisible(renderObjBG, alpha > 0);
}

function SetFGAlphaVisibility(renderObjFG, alpha) {
    ObjRender_SetAlpha(renderObjFG, alpha);
    Obj_SetVisible(renderObjFG, alpha > 0);
}

function SetBGFGAlphaVisibility(renderObjBG, renderObjFG, alpha) {
    SetBGAlphaVisibility(renderObjBG, alpha);
    SetFGAlphaVisibility(renderObjFG,alpha)
}

function BreakSpellBG(renderObjBG, renderObjFG, alpha) {
    SetBGFGAlphaVisibility(renderObjBG, renderObjFG, alpha)
}

task RenderMarisaSpellBG {
    while (spellBg) {
        SetBGFGAlphaVisibility(MARISA_SPELLBG, MARISA_SPELLFG, spellBGAlpha);
        ObjSprite2D_SetSourceRect(MARISA_SPELLFG, 0, 0 + (frame*4) % 512, 512, 512 + (frame*4) % 512);

        if (spellBGAlpha <= 256) {spellBGAlpha += 10;}   // I'm trying to prevent a possible overflow.
        frame++;
        yield;
    }

    // Once the spell phase is over, break away from the task.
    spellBGAlpha = 0;
    BreakSpellBG(MARISA_SPELLBG, MARISA_SPELLFG, spellBGAlpha);
    return;
}

task RenderReisenSpellBG {
    while (spellBg) {
        SetBGFGAlphaVisibility(REISEN_SPELLBG, REISEN_SPELLFG, spellBGAlpha);
        ObjRender_SetAngleZ(REISEN_SPELLFG, -frame*0.8);
        ObjRender_SetAngleZ(REISEN_SPELLBG, frame*1.0);

        if (spellBGAlpha <= 256) {spellBGAlpha += 5;}   // I'm trying to prevent a possible overflow.
        frame++;
        yield;
    }

    spellBGAlpha = 0;
    BreakSpellBG(REISEN_SPELLBG, REISEN_SPELLFG, spellBGAlpha);
    return;
}

task RenderMokouSpellBG {
    while (spellBg) {
        SetBGFGAlphaVisibility(MOKOU_SPELLBG, MOKOU_SPELLFG, spellBGAlpha);
        ObjRender_SetAngleZ(MOKOU_SPELLFG, frame*1.0);

        if (spellBGAlpha <= 256) {spellBGAlpha += 10;}
        frame++;
        yield;
    }

    spellBGAlpha = 0;
    BreakSpellBG(MOKOU_SPELLBG, MOKOU_SPELLFG, spellBGAlpha);
    return;
}

task RenderKaguyaSpellBG {
    // Override definition defaults for the render priority and image source dimensions.
    ObjSprite2D_SetSourceRect(KAGUYA_SPELLBG, 0, 0, 512, 592);
    Obj_SetRenderPriority(KAGUYA_SPELLFG, 0.20);

    while (spellBg) {
        SetBGFGAlphaVisibility(KAGUYA_SPELLBG, KAGUYA_SPELLFG, spellBGAlpha);
        ObjSprite2D_SetSourceRect(KAGUYA_SPELLFG, 0, 0 + (frame * 0.7) % 512, 512, 512 + (frame * 0.7) % 512);

        if (spellBGAlpha <= 256) {spellBGAlpha += 10;}
        frame++;
        yield;
    }

    spellBGAlpha = 0;
    BreakSpellBG(KAGUYA_SPELLBG, KAGUYA_SPELLFG, spellBGAlpha);
    return;
}

task RenderEirinSpellBG {
    Obj_SetRenderPriority(EIRIN_SPELLFG, 0.20);
    while (spellBg) {
        SetBGFGAlphaVisibility(EIRIN_SPELLBG, EIRIN_SPELLFG, spellBGAlpha);
        ObjSprite2D_SetSourceRect(EIRIN_SPELLFG, 0, 0 + (frame*4) % 512, 512, 512 + (frame*4) % 512);

        if (spellBGAlpha <= 256) {spellBGAlpha += 10;}
        frame++;
        yield;
    }

    spellBGAlpha = 0;
    BreakSpellBG(EIRIN_SPELLBG, EIRIN_SPELLFG, spellBGAlpha);
    return;
}
