#TouhouDanmakufu[Single]
#ScriptVersion[3]
#Title["Marisa - Spell 1"]
#System["script/system.dnh"]
#include "script/dependencies.dnh"

let objBoss;
let objPlayer;
let objScene = GetEnemyBossSceneObjectID();
let frames = 0;

@Initialize {
    //Play(LOSTWORD_YUYUKO, 100);
    SetCommonData("boss_name", "Marisa Kirisame");
    objBoss = ObjEnemy_Create(OBJ_ENEMY_BOSS);
    renderMarisaIN(objBoss, 2);
    ObjEnemy_Regist(objBoss);
    objPlayer = GetPlayerObjectID();

    BFX_Init();

    ObjMove_SetPosition(objBoss, 388, 140);
    ObjMove_SetDestAtWeight(objBoss, GetCenterX(), GetCenterY(), 15, 5.5);
    TWaveCircle();
    RandomMove(objBoss);
}

@Event {
    alternative(GetEventType())
    case(EV_REQUEST_LIFE) {
        SetScriptResult(5000);
    } case(EV_REQUEST_TIMER) {
        SetScriptResult(71);
    } case(EV_REQUEST_SPELL_SCORE) {
        SetScriptResult(10000000);
    } case(EV_PLAYER_SPELL) {
        PreventSpellDamage(objBoss);
    }
}

@MainLoop {
    UpdateBossLocation(objBoss);
    CollisionUpdate(objBoss);
    HandleBossDefeat(objBoss, objScene);

    alternative(frames)
    case(1) {
        DeclareSpell("Star Sign \"Tablespoon of Stars\"", "./../../../assets/img/marisa_cutin.png");
        Play(ENEM_SPELL, 45);
        EffectPentagram(objBoss);
    } case(160) {
        //PrimaryShot;
    }

    frames++;
    yield;
}

task PrimaryShot {
    let a = 90;
    wait(30);
    while (ObjEnemy_GetInfo(objBoss, INFO_LIFE) > 0) {
        ascent (i in 0..2) {
            Play(CHARGE, 100);
            BFX_Charge(ex, ey, 130, 30);
            wait(30);
            ascent (j in 0 .. 8) {
                loop(25) {
                    Check(objBoss);
                    Play(BULLET, 30);
                    let stars = CreateShotA1(ex + 20*cos(a), ey + 20*sin(a), 4 - j/7, a, L_STAR_Y, 15);
                    if (j % 2 == 0) {ObjMove_SetAngularVelocity(stars, 3.5);}
                    else {ObjMove_SetAngularVelocity(stars, -3.5);}
                    CancelAngularVelocity(i, j, stars);
                    a += 360/25;
                }
                if (i == 0) {a += 150;}
                else {a -= 150;}
                wait(10);
            }
            wait(180);
        }
        yield;
    }
}

task CancelAngularVelocity(i, j, stars) {
    wait(120);
    ObjMove_SetAngularVelocity(stars, 0);
    if (j % 2 == 0) {ObjMove_SetAngularVelocity(stars, 0 + j/15);}
    else {ObjMove_SetAngularVelocity(stars, 0 - j/15);}
}
